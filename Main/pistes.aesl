#Jack Nicklaus


var vitesse 
var vitesseR #vitesse rotation
var val #valeur du capteur prox.ground.delta[0]
var val1 #valeur du capteur prox.ground.delta[1]
var etat #si == 2 on suit la ligne 
var bit1 var bit2 var bit3   #valeur de chaque bit 0 ou 1 
var bit5 var bit6 var bit7
var tmpCode #temps qu'il faut pour parcourir un code barre=4*2.5cm=10cm 
var tmpBit1 #temps dans lequel le robot est dans le premier bit  
var tmpBit2   var tmpBit3 
var lecture # va de 0 à la durée qu'il faut pour parcourir un code
var nombre_lu 
var amorce
var numAmorce
var tmp           var tmp1        #variable temporaire
var chrono 
var distance
var vitesseRéel
var angle 
var tempsLu
var L[8]=0,0,0,0,0,0,0,0
var j    var tmpRotation  var rotation var s
tempsLu=0
vitesse=100
vitesseR=35

tmp1=0

callsub initialisation

sub initialisation 
tmpCode=20
tmpBit1=8
tmpBit2=tmpBit1+6
tmpBit3=tmpBit2+5
lecture=0
tempsLu=0
etat=1
bit1=0 bit2=0 bit3=0 bit5=0 bit6=0 bit7 =0
numAmorce=0
amorce=0
j=0
rotation=0


 #########  sub finDuGreen
 sub finDuGreen
 nombre_lu=4* bit5+2*bit6+bit7
 rotation=1
 L[4]=32
 L[5]=32*bit5
 L[6]=32*bit6
 L[7]=32*bit7
 
	if nombre_lu==0 or nombre_lu==7 then
		call leds.top(0,0,0)
		angle=0
		rotation=0
	end
	
	if nombre_lu==1 then
					call leds.top(0,32,20) #cyan
					angle=45		s=100 j=0
     ###########
				etat=6
				if j<30  then
						j++
						motor.left.target=s
						motor.right.target=-s
			    end
		##########
	end	
		
	if nombre_lu==2 then
		call leds.top(0,32,0)
		angle=-45
				angle=45		s=100 j=0
	##############
	etat=6
			if j<30  then
						j++
						motor.left.target=s
						motor.right.target=-s
			    end		
			########
	end
		
	if nombre_lu==4 then
		call leds.top(0,0,32)
		angle=90
		
		##############
		etat=6
				if j<30  then
						j++
						motor.left.target=s
						motor.right.target=-s
			    end
			########
	end
		
		
	if nombre_lu==3 then
		call leds.top(20,20,0)
		angle=-90
		
		##############
		etat=6
				if j<30  then
						j++
						motor.left.target=s
						motor.right.target=-s
			    end
			########
	end
	
	if nombre_lu==5 then
		call leds.top(32,0,20)
		angle=120
		##############
		etat=6  s=200 
					
		if j<30  then
						j++
						motor.left.target=s
						motor.right.target=-s
			    end
			
			########
	end
		
	if nombre_lu==6 then #rouge 
		call leds.top(32,0,0)
		angle=-120
		##############
		etat=6
				if j<30  then
						j++
						motor.left.target=s
						motor.right.target=-s
			    end
			########
	end	
	
	
	rotation =0
if rotation==0	then
	 if chrono>0  then #va taper la balle
								    etat=3
								end  
end
#######fin sub finDuGreen

 
 
######### sub allumer  
sub allumer 
nombre_lu=4* bit1+2*bit2+bit3 

distance=nombre_lu*10       #la distance = nombre_lu*10
vitesseRéel=800/32
chrono=distance*10/vitesseRéel
 L[0]=32
 L[1]=32*bit1
 L[2]=32*bit2
 L[3]=32*bit3

	vitesse=800
	vitesseR=50 
	if nombre_lu==0 or nombre_lu==7 then
		call leds.top(0,0,0)
	end
	
	if nombre_lu==1 then  #cyan
		call leds.top(0,32,20) 
	end	
		
	if nombre_lu==2 then
		call leds.top(0,32,0)
	end
		
	if nombre_lu==4 then
		call leds.top(0,0,32)
	end
		
	if nombre_lu==3 then
		call leds.top(20,20,0)
	end
	
	if nombre_lu==5 then
		call leds.top(32,0,20)
	end
		
	if nombre_lu==6 then #rouge
		call leds.top(32,0,0)
	end	
#######fin sub tracer




onevent prox #$$$$$$$$$$$#

call leds.circle(L[0],L[1],L[2],L[3],L[4],L[5],L[6],L[7])
val=prox.ground.delta[0]
val1=prox.ground.delta[1]

###  si on est dans le gris idéal 
	if val>proxInf and val <proxSup and rotation==0  then
		etat=2 #faire le suivi de ligne	
	end 
		
### et on lit les codes barres simultanément:
 
	 if  lecture>tmpCode and numAmorce==1 then  #10 cm atteints en tmpCode*10ms  code lu 
		  lecture=0  #remettre le compteur à 0
	 	  amorce=0
	 	   #c'est le premier code qui vient d'etre lu
		   callsub allumer #allumer aprés la lecture du code et tracer au 2eme code
		
 
	  elseif lecture>tmpCode and  numAmorce==2  then  
				 lecture=0  #remettre le compteur à 0	
				amorce=0					
					callsub finDuGreen			
			 end	
	
	if  val1<900   and   lecture==0 and  numAmorce==1  then 
	#on est dans le noir et y a pas de code en cours alors c'est un nouveau code 
	 #c'est le deuxieme 
				amorce=2  
				tempsLu=0
			elseif val1<900   and   lecture==0 and  numAmorce==0 then
				amorce=1   #1er amorce 
	end

	
	
############################# if amorce==1	 lire le premier code barre
if  amorce==1 then  #si nouvel amorce alors 	
	vitesse=100
	vitesseR=45
	lecture++  #on déclenche le compteur du temps 
	tempsLu++ # et un autre 
	
		if lecture==3 then           #premiere case 
				bit1=0 bit2 =0 bit3=0 
		end
	
		if  lecture ==tmpBit1 then  #si le temps est egal a tmpBit1 le robot est dans le 1er bit de valeurs 	
				if val1>900 then  #on pioche la valeur du bit1 	
						bit1=0  #si noir		
					else 
						bit1=1 #si blanc
				end
		end	
	
		if  lecture ==tmpBit2 then  #le robot est sur le bit2	
				if val1>900 then
					    bit2=0      	
			       else 
					    bit2=1
			    end
		end
			
		if  lecture ==tmpBit3 then  #le robot est sur le bit3			
				if val1>900 then				
				   	    bit3=0 
				    else 
		   				bit3=1
				end
		end
	
				if tempsLu>tmpBit3 then
					numAmorce=1
				end
end					
 emit bits[bit1,bit2,bit3]
######################### if amorce==2  lire le deuxième code barre
 if  amorce==2 then  # deuxieme amorce alors 	
	vitesse=100
	vitesseR=45
	numAmorce=2
	lecture++  #on déclenche le compteur du temps 

		if lecture==3 then           #amorce 2 
				bit5=0 bit6 =0 bit7=0 
		end
	
		if  lecture ==tmpBit1 then  #si le temps est egal a tmpBit1 le robot est dans le 1er bit de valeurs 			
				if val1>900 then  #on pioche la valeur du bit5 	
						bit5=0  #si noir					
					else 
						bit5=1 #si blanc
				end
		end	
	
		if  lecture ==tmpBit2 then  #le robot est sur le bit6
				if val1>900 then
					    bit6=0  
			       else 
					    bit6=1
			    end
		end
			
		if  lecture ==tmpBit3 then  #le robot est sur le bit7
				if val1>900 then
				   	    bit7=0 					
				    else 
		   				bit7=1
				end
		end		
end					
 ################## end if amorce==2
 
emit bits22[bit5 ,bit6 ,bit7 ]
	

####################################  suivi de ligne 
if  etat==2 then  #faire le suivi de ligne
	
	if  val > 	proxSup	then     # trop claire, aller à gauche
			motor.left.target	 =	-vitesseR
			motor.right.target = vitesseR
		   # call leds.circle(0,0,0,0,0,0,32,32)
			tmp=0 ####   si ca tourne on arrete de compter 
			if lecture>0 then
				tmp-- 
				lecture=lecture+tmp
			end
		
		elseif 	 val <   proxInf  	 then  # trop sombre, aller à droite 
			motor.left.target	 =	 vitesseR #50
			motor.right.target =   -vitesseR
		    #call leds.circle(0,32,32,0,0,0,0,0)
			tmp=0####si ca tourne on arrete de compter 
			if lecture>0 then
				tmp-- 
				lecture=lecture+tmp
			end
			
		else 
			motor.left.target	 =vitesse	#280
			motor.right.target =  vitesse
			#call leds.circle(32,32,0,0,0,0,0,32)
	end
end
########################### fin suivi de ligne

	 if etat==1 then					#etat arret
			motor.left.target	 =	0
			motor.right.target = 0
	end
	
	if etat==3 then				#etat va taper la balle
		motor.left.target=300
	   motor.right.target=300
	   chrono--
	   if chrono==0 then
	   	etat=1
	   end
	end

	if  etat==4 then				#etat demarrage button.forward
		motor.left.target=80
	   motor.right.target=80	   
		call leds.bottom.left(0,0,0)
		call leds.bottom.right(0,0,0)
		call leds.top(30,0,10)
	end

	if etat==5 then   #etat tourner a gauche if button.left
		 motor.left.target = - 100	 
	 motor.right.target = 100	 
	 call leds.top(10,0,30)
	end

	
	
#commandes manuelles :
onevent button.forward    #marche avant 		
		etat=4 #demarrage
		
onevent button.center #arret manuel
	callsub initialisation 

onevent button.left #tourner vers la gauche
    etat=5

onevent button.right #tourner vers la droite   
     motor.left.target =  200     
     motor.right.target = -  200		
	 call leds.top(10,0,30)	
		
onevent button.backward #marche arrière
     motor.left.target =  -300	 
	 motor.right.target = - 300